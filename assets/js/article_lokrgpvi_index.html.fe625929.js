"use strict";(self.webpackChunkdesert_fisher=self.webpackChunkdesert_fisher||[]).push([[5838],{8730:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>E,data:()=>o});var n=a(6254);const h=a.p+"assets/img/c64c33e20b330e6fa3c40a816a2381b77908.736dee56.png",l=a.p+"assets/img/690785bc58639169df752ca001d82e038823.0902fa08.png",k=a.p+"assets/img/b4cacbf211c796ba7ccd9ca8fdfae8905990.8ed5a6e0.png",t=a.p+"assets/img/3e7d68353ecaa9c62720955d1d230ea61665.6fbaa4c3.png",e=a.p+"assets/img/fa47478f32c76bf2adee8ad73e206b295695.13e505fc.png",p=a.p+"assets/img/860cb5670ca1da633d4f7cd69a9b024a8599.6fa5eab4.png",r=a.p+"assets/img/b66485d2d34c392a8f599b496a59f0fc3877.494cc834.png",d=a.p+"assets/img/693f228eb6a69046a950dd8b35992c6f3820.a214c46e.png",A=a.p+"assets/img/616433f141a1a49e76ff6be600dfcde46951.fbab94ec.png",g=a.p+"assets/img/08bd74f1969f4ad3e07239687aace37d1767.aedcbf06.png",y=a.p+"assets/img/3f61fa813672068bbdd42947d4d6d6907655.c52416c2.png",D=a.p+"assets/img/9008c362571f7ceff9b68a57858707423332.3be6104e.png",c=a.p+"assets/img/微信图片_20240916205905.4961f1b6.jpg",B={},E=(0,a(5459).A)(B,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<p><img src="'+h+'" alt="|600"></p><h1 id="一、课程目标" tabindex="-1"><a class="header-anchor" href="#一、课程目标"><span>一、课程目标</span></a></h1><p>1.了解代理以及VPN检测与对抗<br> 2.了解SSL Pinning<br> 3.了解双向认证</p><h1 id="二、工具" tabindex="-1"><a class="header-anchor" href="#二、工具"><span>二、工具</span></a></h1><p>1.教程Demo(更新)<br> 2.Charles<br> 3.Reqable</p><h1 id="三、课程内容" tabindex="-1"><a class="header-anchor" href="#三、课程内容"><span>三、课程内容</span></a></h1><h3 id="_1-代理检测" tabindex="-1"><a class="header-anchor" href="#_1-代理检测"><span>1.代理检测</span></a></h3><p><code>定义</code><br> 代理检测是用于检测设备是否设置了网络代理。这种检测的目的是识别出设备是否尝试通过代理服务器（如抓包工具）来转发网络流量，从而可能截获和分析App的网络通信。<br><code>原理</code><br> App会检查系统设置或网络配置，以确定是否有代理服务器被设置为转发流量。例如，它可能会检查系统属性或调用特定的网络信息API来获取当前的网络代理状态。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http.proxyHost</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http.proxyPort</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  ==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Port跟设置有关，例如Charles默认是8888</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>强制不走代理</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">connection </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">HttpURLConnection</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openConnection</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">NO_PROXY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">OkHttpClient</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Builder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">NO_PROXY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Charles安装与配置</code><br> 下载地址:https://www.charlesproxy.com/download/<br><img src="'+l+'" alt="图片"><br><img src="'+k+'" alt="图片"><br> 放一组key:</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>Registered Name:\t52pojie  </span></span>\n<span class="line"><span>License Key:\td43c11e6697bbe07a8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://blog.csdn.net/qq_45005145/article/details/141132846" target="_blank" rel="noopener noreferrer">详细安装与配置</a></p><p><code>anti脚本:</code></p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> anti_proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> GetProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.lang.System</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    GetProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">overload</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.lang.String</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">getprop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">getprop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">indexOf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http.proxyHost</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> getprop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">indexOf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http.proxyPort</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">getprop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>透明代理</code><br> 透明代理（Transparent Proxy）是一种特殊的代理服务类型，它可以在客户端（如浏览器或应用程序）不知道的情况下拦截、转发和处理网络请求。与传统的代理服务不同，透明代理不需要客户端进行任何配置就能工作。<br><a href="https://blog.seeflower.dev/archives/296/" target="_blank" rel="noopener noreferrer">[Clash版]安卓上基于透明代理实现热点抓包</a><br><a href="https://blog.seeflower.dev/archives/207/" target="_blank" rel="noopener noreferrer">安卓上基于透明代理对特定APP抓包</a></p><h3 id="_2-vpn检测" tabindex="-1"><a class="header-anchor" href="#_2-vpn检测"><span>2.VPN检测</span></a></h3><p><code>定义</code><br> VPN检测是指应用程序或系统检查用户是否正在使用虚拟专用网络（Virtual Private Network, VPN）的一种技术。当用户使用VPN时，他们的网络流量会被加密并通过一个远程服务器路由，这可以隐藏用户的实际IP地址和位置信息，同时保护数据的安全性和隐私。<br><code>原理</code><br> 当客户端运行VPN虚拟隧道协议时，会在当前节点创建基于<code>eth</code>之上的<code>tun0</code>接口或<code>ppp0</code>接口。这些接口是用于建立虚拟网络连接的特殊网络接口。<br> 根据OSI七层模型，二者分别支持的协议:</p><table><thead><tr><th>VPN</th><th>OpvenVPN、IPsec、IKEv2、PPTP、L2TP、WireGuard等</th></tr></thead><tbody><tr><td>代理</td><td>HTTP、HTTPS、SOCKS、FTP、RTSP等</td></tr><tr><td>VPN 协议大多是作用在 OSI 的第二层和第三层之间，由此可见VPN能抓到代理方式的所有的包</td><td></td></tr></tbody></table><div class="language-kotlin line-numbers-mode" data-ext="kotlin" data-title="kotlin"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> boolean </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Check_Vpn1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        try</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Enumeration</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">NetworkInterface</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> networkInterfaces </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> NetworkInterface.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getNetworkInterfaces</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">();  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (networkInterfaces </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) {  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Iterator it </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Collections.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">list</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(networkInterfaces).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">iterator</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">();  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            while</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (it.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hasNext</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                NetworkInterface networkInterface </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (NetworkInterface) it.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">next</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">();  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (networkInterface.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">isUp</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;&amp;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">networkInterface.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getInterfaceAddresses</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">isEmpty</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                    Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">d</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;zj595&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;isVpn NetworkInterface Name: &quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> networkInterface.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">());  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                    if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (Intrinsics.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">areEqual</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(networkInterface.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(), </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;tun0&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">||</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Intrinsics.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">areEqual</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(networkInterface.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(), </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;ppp0&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">||</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Intrinsics.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">areEqual</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(networkInterface.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(), </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;p2p0&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">||</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Intrinsics.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">areEqual</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(networkInterface.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(), </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;ccmni0&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)) {  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                        return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                    }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            }  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        } </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (Throwable th) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            th.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">();  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> boolean </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Check_Vpn2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        boolean z;  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        String networkCapabilities;  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        try</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Object systemService </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getApplicationContext</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSystemService</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;connectivity&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Intrinsics.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">checkNotNull</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(systemService, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;null cannot be cast to non-null type android.net.ConnectivityManager&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            ConnectivityManager connectivityManager </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (ConnectivityManager) systemService;  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            NetworkCapabilities networkCapabilities2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> connectivityManager.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getNetworkCapabilities</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(connectivityManager.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getActiveNetwork</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">());  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">i</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;zj595&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;networkCapabilities -&gt; &quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> networkCapabilities2);  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            boolean z2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> networkCapabilities2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> networkCapabilities2.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hasTransport</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 检查网络能力是否包含 &quot;WIFI|VPN&quot;  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (networkCapabilities2 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (networkCapabilities </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> networkCapabilities2.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) {  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (StringsKt.contains$</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">default</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">((CharSequence) networkCapabilities, (CharSequence) </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;WIFI|VPN&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">false</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, (Object) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                    z </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                    return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> !</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">z </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">||</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> z2;  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            z </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (z) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        } </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (Exception e) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            e.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">();  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>anti</code></p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hook_vpn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">perform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> NetworkInterface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.net.NetworkInterface</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        NetworkInterface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">            var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //hook java层的getName方法  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">tun0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ppp0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rmnet_data0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> NetworkCapabilities</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">android.net.NetworkCapabilities</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        NetworkCapabilities</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hasTransport</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        NetworkCapabilities</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">appendStringRepresentationOfBitMaskToStringBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bitMask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> nameFetcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> separator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">bitMask</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 18</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">bitMask</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bitMask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">WIFI</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bitMask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">                this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">appendStringRepresentationOfBitMaskToStringBuilder</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bitMask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> nameFetcher</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> separator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    })</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-ssl-pinning" tabindex="-1"><a class="header-anchor" href="#_3-ssl-pinning"><span>3.SSL Pinning</span></a></h2><p><code>SSL Pinning</code> 也称为证书锁定，是Google官方推荐的检验方式，意思是将服务器提供的SSL/TLS证书内置到移动客户端，当客户端发起请求的时候，通过对比内置的证书与服务器的证书是否一致，来确认这个连接的合法性。<br> PS:这里还要提到一个概念:<code>单向校验</code>，本质上二者没区别，<code>SSL Pinning</code>可以理解为加强版的<code>单向校验</code><br><img src="'+t+'" alt="图片"></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1.客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。  </span></span>\n<span class="line"><span>2.服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书  </span></span>\n<span class="line"><span>3.客户端使用服务端返回的信息验证服务器的合法性，包括：  </span></span>\n<span class="line"><span>    (1)证书是否过期  </span></span>\n<span class="line"><span>    (2)发型服务器证书的CA是否可靠  </span></span>\n<span class="line"><span>    (3)返回的公钥是否能正确解开返回证书中的数字签名  </span></span>\n<span class="line"><span>    (4)服务器证书上的域名是否和服务器的实际域名相匹配、验证通过后，将继续进行通信，否则，终止通信  </span></span>\n<span class="line"><span>4.客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择  </span></span>\n<span class="line"><span>5.服务器端在客户端提供的加密方案中选择加密程度最高的加密方式。  </span></span>\n<span class="line"><span>6.服务器将选择好的加密方案通过明文方式返回给客户端  </span></span>\n<span class="line"><span>7.客户端接收服务端返回的加密方式后，使用该加密方式生成产生随机码，用作通信过程中对称加密的密钥，使用服务端返回的公钥进行加密，将加密后的随机码发送至服务器  </span></span>\n<span class="line"><span>8.服务器收到客户端返回的加密信息后，使用自己的私钥进行解密，获取对称加密密钥。在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SSL Pinning</code>主流的三套方案:<code>公钥校验</code>、<code>证书校验</code>、<code>Host校验</code><br> 因为是客户端做的校验，所以可以在本地进行hook对抗，参考以下的两个项目:<br><a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="noopener noreferrer">JustTrustMe</a>、<a href="https://github.com/ac-pm/SSLUnpinning_Xposed" target="_blank" rel="noopener noreferrer">sslunpining</a></p><h3 id="_1-指纹校验" tabindex="-1"><a class="header-anchor" href="#_1-指纹校验"><span>1.指纹校验</span></a></h3><p>在网站中我们可以看到网站的证书相关信息，其中就包含了指纹信息<br><img src="'+e+'" alt="图片"><br><code>常见安卓网络开发框架</code></p><table><thead><tr><th>框架名称</th><th>描述</th><th>GitHub 地址</th></tr></thead><tbody><tr><td>Volley</td><td>由Google开源的轻量级网络库，支持网络请求处理、小图片的异步加载和缓存等功能</td><td><a href="https://github.com/google/volley" target="_blank" rel="noopener noreferrer">https://github.com/google/volley</a></td></tr><tr><td>Android-async-http</td><td>基于Apache HttpClient的一个异步网络请求处理库</td><td><a href="https://github.com/android-async-http/android-async-http" target="_blank" rel="noopener noreferrer">https://github.com/android-async-http/android-async-http</a></td></tr><tr><td>xUtils</td><td>类似于Afinal，但被认为是Afinal的一个升级版，提供了HTTP请求的支持</td><td><a href="https://github.com/wyouflf/xUtils3" target="_blank" rel="noopener noreferrer">https://github.com/wyouflf/xUtils3</a></td></tr><tr><td>OkHttp</td><td>一个高性能的网络框架，已经被Google官方认可，在Android 6.0中底层源码已经使用了OkHttp来替代HttpURLConnection</td><td><a href="https://github.com/square/okhttp" target="_blank" rel="noopener noreferrer">https://github.com/square/okhttp</a></td></tr><tr><td>Retrofit</td><td>提供了一种类型安全的HTTP客户端接口，简化了HTTP请求的编写，通常与OkHttp配合使用</td><td><a href="https://github.com/square/retrofit" target="_blank" rel="noopener noreferrer">https://github.com/square/retrofit</a></td></tr><tr><td>OkHttp和Retrofit是非常流行的组合，被广泛应用于现代Android应用开发中</td><td></td><td></td></tr></tbody></table><p><code>原理(以okhttp框架为例):</code><br> 在CertificatePinner类里有一个check方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 检查指定主机名的证书链是否符合预设的哈希值（证书固定）。  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> hostname</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">         要验证的主机名。  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> peerCertificates</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 待验证的证书列表。  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@throws</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> SSLPeerUnverifiedException</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 如果证书不符合预设的哈希值，则抛出此异常。  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> check</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String hostname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> List</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Certificate</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> peerCertificates</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      throws SSLPeerUnverifiedException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 查找与主机名匹配的哈希值列表（证书固定列表）。  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> findMatchingPins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">hostname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 如果没有找到任何匹配的哈希值，则直接返回，表示无需进一步检查。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">isEmpty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 如果存在证书链清理器，则先清理证书链中的冗余证书。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">certificateChainCleaner </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      peerCertificates </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> certificateChainCleaner</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">clean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">peerCertificates</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> hostname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 遍历每一个证书进行检查。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> certsSize </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> peerCertificates</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> certsSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 获取当前证书。  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      X509Certificate</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x509Certificate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">X509Certificate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> peerCertificates</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 懒加载计算每个证书的SHA-1和SHA-256哈希值。  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      ByteString</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sha1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      ByteString</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sha256</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 遍历预设的哈希值列表。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pinsSize </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pinsSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Pin</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 根据预设的哈希算法进行检查。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hashAlgorithm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">equals</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sha256/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 如果尚未计算SHA-256哈希值，则进行计算。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sha256 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sha256 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sha256</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x509Certificate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 如果证书的SHA-256哈希值与预设值相同，则返回成功。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">equals</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sha256</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hashAlgorithm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">equals</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sha1/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 如果尚未计算SHA-1哈希值，则进行计算。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sha1 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sha1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sha1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x509Certificate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 如果证书的SHA-1哈希值与预设值相同，则返回成功。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">equals</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">sha1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 如果遇到不支持的哈希算法，则抛出错误。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> AssertionError</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unsupported hashAlgorithm: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hashAlgorithm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 如果遍历完所有证书和哈希值都没有匹配，则抛出异常。  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SSLPeerUnverifiedException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">No matching certificate found.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>实现方案:</code></p><div class="language-kotlin line-numbers-mode" data-ext="kotlin" data-title="kotlin"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//指纹检测  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> check_SSL_PINNING_key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 使用CoroutineScope和Dispatchers.IO在后台线程中执行网络操作  </span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    CoroutineScope</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(Dispatchers.IO).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">launch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 定义需要固定证书的域名  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> caDomain </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;www.52pojie.cn&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 使用CertificatePinner.Builder构建一个证书固定器  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 添加一个sha256哈希值，这个哈希值是服务器证书的指纹  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 这个值需要通过openssl工具获取  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pinner </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CertificatePinner.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Builder</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(caDomain, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;sha256/WnsD5UGdP5/a65xO1rpH8ru2EjyxkmPEaiNtKixhJLU=&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 添加证书指纹  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 构建完成证书固定器  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 使用newBuilder创建一个新的OkHttpClient实例，用于覆盖默认的客户端配置  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pClient </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> client.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newBuilder</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">certificatePinner</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(pinner) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 设置证书固定器  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 构建新的OkHttpClient实例  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 构建一个网络请求，访问指定的URL  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> request </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Request.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Builder</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">url</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;https://www.52pojie.cn/?q=SSLPinningCode&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 设置请求的URL  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 构建请求对象  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        try</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 执行网络请求，并获取响应  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> response </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pClient.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newCall</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(request).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">execute</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 如果响应状态码是200，表示指纹检测通过  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">d</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TAG, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;指纹检测通过，状态码:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">response.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">code</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        } </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (e: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">IOException</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 如果发生IOException，表示指纹检测不通过  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">d</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TAG, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;指纹检测不通过&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            e.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 打印异常堆栈信息，用于调试  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装openssl，<a href="https://slproweb.com/products/Win32OpenSSL.html?spm=5176.28103460.0.0.3a32572c9fMUi9" target="_blank" rel="noopener noreferrer">OpenSSL Windows 版本</a><br><img src="'+p+'" alt="图片"><br> 配置环境变量<br><img src="'+r+'" alt="图片"><br> cmd窗口输入以下命令获取</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>openssl s_client -connect www.52pojie.cn:443 -servername www.52pojie.cn | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+d+'" alt="图片"><br><code>anti脚本</code></p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> anti_ssl_key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">\t//check方法置空即可  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> okhttp3_Activity_1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">okhttp3.CertificatePinner</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    okhttp3_Activity_1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">check</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">overload</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.lang.String</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.util.List</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[+] Bypassing SSL key pinning: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-证书校验" tabindex="-1"><a class="header-anchor" href="#_2-证书校验"><span>2.证书校验</span></a></h3><p><code>原理:</code><br> 通过<code>trustManager</code> 类实现的checkServerTrusted接口，核心在于验证服务器证书的公钥。具体步骤包括：获取服务器返回的证书，将其公钥编码为 Base64 字符串；同时从本地资源加载预存的可信客户端证书，并将其公钥也编码为 Base64 字符串。然后，比较这两个公钥是否匹配，以此确认服务器的身份是否合法。最后，使用自定义的 <code>SSLSocketFactory</code> 发起 HTTPS 请求，确保通信过程中只信任预定义的服务器证书，从而有效抵御中间人攻击。<br><code>实现方案:</code></p><div class="language-kotlin line-numbers-mode" data-ext="kotlin" data-title="kotlin"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 定义一个函数用于检查SSL证书  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> check_SSL_PINNING_CA</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 创建一个X509TrustManager的匿名对象，用于自定义信任管理器  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> trustManager: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509TrustManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> object</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> : </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509TrustManager</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 客户端证书信任检查，这里不实现任何逻辑  </span></span>\n<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">        @Throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CertificateException::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">class</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        override</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> checkClientTrusted</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(chain: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Array</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509Certificate</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">?&gt;?, authType: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">?) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 服务器证书信任检查  </span></span>\n<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">        @Throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CertificateException::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">class</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        override</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> checkServerTrusted</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(chain: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Array</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509Certificate</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;, authType: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">?) {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 获取服务器返回的第一个证书  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> cf: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509Certificate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> chain[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 将服务器证书的公钥编码为Base64字符串  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ServerPubkey: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Base64.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">encodeToString</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(cf.publicKey.encoded, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TAG, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;服务器端返回的证书:&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ServerPubkey)  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 从客户端资源中读取证书  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> client_input </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> resources.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openRawResource</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(R.raw.wuai)  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> certificateFactory </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CertificateFactory.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getInstance</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;X.509&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 生成客户端证书  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> realCertificate: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509Certificate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> certificateFactory.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">generateCertificate</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(client_input) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> X509Certificate  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 将客户端证书的公钥编码为Base64字符串  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> realPubkey: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Base64.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">encodeToString</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(realCertificate.publicKey.encoded, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TAG, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;客户端资源目录中的证书:&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> realPubkey)  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 检查证书有效期  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            cf.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">checkValidity</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 比较服务器证书和客户端证书的公钥是否相同  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> expected </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> realPubkey.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">equals</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(ServerPubkey, ignoreCase </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">expected) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TAG, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;证书检测不通过&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            } </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TAG, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;证书检测通过&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 返回受信任的CA证书数组，这里返回空数组  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        override</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getAcceptedIssuers</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(): </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Array</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509Certificate</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">?&gt; {  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> arrayOfNulls</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509Certificate</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 声明SSLSocketFactory变量  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    var</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> factory: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">SSLSocketFactory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">? </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 获取SSL上下文  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sslContext </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SSLContext.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getInstance</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;SSL&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 初始化SSL上下文，使用自定义的信任管理器  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        sslContext.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">arrayOf</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TrustManager</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;(trustManager), </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SecureRandom</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">())  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 获取SSLSocketFactory  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        factory </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sslContext.socketFactory  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    } </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (e: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">java</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.lang.Exception) {  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        e.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 确保factory不为空  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> finalFactory: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">SSLSocketFactory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">? </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> factory  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 创建并启动一个新线程来执行网络请求  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    object</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> : </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Thread</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        override</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            try</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                // 使用自定义的SSLSocketFactory创建OkHttpClient  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> client </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                    OkHttpClient.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Builder</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sslSocketFactory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(finalFactory, trustManager).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                // 构建请求  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> req </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Request.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Builder</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">url</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;https://www.52pojie.cn/forum.php&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                // 发送请求并获取响应  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> call: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">okhttp3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.Call </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> client.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newCall</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(req)  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> res: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> call.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">execute</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                // 打印响应状态码  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;请求发送成功&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;状态码：&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> res.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">code</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">())  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            } </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (e: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">IOException</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">                // 打印网络异常信息  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;请求发送失败&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;网络异常$e&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cmd窗口输入以下命令获取证书信息</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>openssl s_client -connect 52pojie.cn:443 -servername 52pojie.cn | openssl x509 -out wuai.pem</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+A+'" alt="图片"><br><code>证书信知识补充:</code></p><table><thead><tr><th>名词</th><th>含义</th><th></th></tr></thead><tbody><tr><td>X.509</td><td>一种通用的证书格式，包含证书持有人的公钥、加密算法等信息</td><td></td></tr><tr><td>PKCS1~PKCS12</td><td>公钥加密（非对称加密）的一系列标准（Public Key Cryptography Standards），.p12 是包含证书和密钥的封装格式</td><td></td></tr><tr><td>*.der</td><td>证书的二进制存储格式（不常用）</td><td></td></tr><tr><td>*.pem</td><td>证书或密钥的 Base64 文本存储格式，可以单独存放证书或密钥，也可以同时存放证书和密钥</td><td></td></tr><tr><td>*.key</td><td>单独存放的 pem 格式的私钥文件，一般保存为 *.key</td><td></td></tr><tr><td>*.cer / *.crt</td><td>两者指的都是证书，Linux 下叫 crt，Windows 下叫 cer；存储格式可以是 pem，也可以是 der</td><td></td></tr><tr><td>*.csr</td><td>证书签名请求（Certificate Signing Request），包含证书持有人的信息，如：国家、邮件、域名等</td><td></td></tr><tr><td>*.pfx</td><td>微软 IIS 的实现，包含证书和私钥</td><td></td></tr><tr><td>有的证书内容是只包含公钥（服务器的公钥），如.crt、.cer、.pem</td><td></td><td></td></tr><tr><td>有的证书既包含公钥又包含私钥（服务器的私钥），如.pfx、.p12</td><td></td><td></td></tr><tr><td>另外有些app的证书不走寻常路，不是上面所罗列到的格式，它有可能伪装成png等其他格式</td><td></td><td></td></tr><tr><td><img src="'+g+'" alt="图片"></td><td></td><td></td></tr></tbody></table><p><code>anti脚本</code><br> 思路：实例化一个trustManager类，然后里面什么都不写，当上面两处调用到这个类时hook这两个地方，把自己定义的空trustManager类放进去</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> anti_ssl_cert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 使用Frida获取Java类X509TrustManager的引用  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> X509TrustManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">javax.net.ssl.X509TrustManager</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 使用Frida获取Java类SSLContext的引用  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> SSLContext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">javax.net.ssl.SSLContext</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 注册一个自定义的TrustManager类  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> TrustManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">registerClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 指定自定义TrustManager的全名  </span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dev.asd.test.TrustManager</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 指定自定义TrustManager实现的接口  </span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        implements</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">X509TrustManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 定义自定义TrustManager的方法实现  </span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        methods</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 客户端证书信任检查，这里不实现任何逻辑  </span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            checkClientTrusted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">chain</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> authType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {},</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 服务器证书信任检查，这里不实现任何逻辑  </span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            checkServerTrusted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">chain</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> authType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {},</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 返回受信任的CA证书数组，这里返回空数组  </span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            getAcceptedIssuers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [];</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    });</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 准备一个TrustManager数组，用于传递给SSLContext.init()方法  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> TrustManagers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">TrustManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()];</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 获取SSLContext.init()方法的引用，该方法用于初始化SSL上下文  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> SSLContext_init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> SSLContext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">overload</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[Ljavax.net.ssl.KeyManager;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[Ljavax.net.ssl.TrustManager;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.security.SecureRandom</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    );</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 覆盖init方法的实现，指定使用自定义的TrustManager  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        SSLContext_init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">keyManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> trustManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> secureRandom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[+] Bypassing Trustmanager (Android &lt; 7) pinner</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 调用原始的init方法，并使用自定义的TrustManager数组  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            SSLContext_init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> keyManager</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> TrustManagers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> secureRandom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        };</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 如果覆盖init方法失败，打印错误信息  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[-] TrustManager (Android &lt; 7) pinner not found</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 可以取消注释来打印异常的详细信息  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-双向认证" tabindex="-1"><a class="header-anchor" href="#_4-双向认证"><span>4.双向认证</span></a></h2><p>双向验证，顾名思义就是客户端验证服务器端证书的正确性，服务器端也验证客户端的证书正确性<br><img src="'+y+'" alt="图片"></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1.客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。  </span></span>\n<span class="line"><span>2.服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务器端的证书，即公钥证书  </span></span>\n<span class="line"><span>3.客户端使用服务端返回的信息验证服务器的合法性，包括：  </span></span>\n<span class="line"><span>    (1)证书是否过期  </span></span>\n<span class="line"><span>    (2)发型服务器证书的CA是否可靠  </span></span>\n<span class="line"><span>    (3)返回的公钥是否能正确解开返回证书中的数字签名  </span></span>\n<span class="line"><span>    (4)服务器证书上的域名是否和服务器的实际域名相匹配、验证通过后，将继续进行通信，否则，终止通信  </span></span>\n<span class="line"><span>4.服务端要求客户端发送客户端的证书，客户端会将自己的证书发送至服务端  </span></span>\n<span class="line"><span>5.验证客户端的证书，通过验证后，会获得客户端的公钥  </span></span>\n<span class="line"><span>6.客户端向服务端发送自己所能支持的对称加密方案，供服务器端进行选择  </span></span>\n<span class="line"><span>7.服务器端在客户端提供的加密方案中选择加密程度最高的加密方式  </span></span>\n<span class="line"><span>8.将加密方案通过使用之前获取到的公钥进行加密，返回给客户端  </span></span>\n<span class="line"><span>9.客户端收到服务端返回的加密方案密文后，使用自己的私钥进行解密，获取具体加密方式，而后，产生该加密方式的随机码，用作加密过程中的密钥，使用之前从服务端证书中获取到的公钥进行加密后，发送给服务端  </span></span>\n<span class="line"><span>10.服务端收到客户端发送的消息后，使用自己的私钥进行解密，获取对称加密的密钥，在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>实现方案:</code><br> 1.首先借助openssl生成<strong>服务端证书</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span># 生成CA私钥  </span></span>\n<span class="line"><span>openssl genrsa -out ca.key 2048  </span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span># 生成CA自签名证书  </span></span>\n<span class="line"><span>openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.crt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.生成<strong>服务端证书</strong></p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> genrsa</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server.key</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2048</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个指令生成一个2048位的RSA私钥，并将其保存到名为<code>server.key</code>的文件中</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> req</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -new</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server.key</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server.csr</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -config</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server_cert.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个指令基于第一步生成的私钥创建一个新的证书签名请求（CSR）。CSR包含了公钥和一些身份信息，这些信息在证书颁发过程中用于识别证书持有者。<code>-out server.csr</code>指定了CSR的输出文件名。<br> 执行这个指令时，系统会提示你输入一些身份信息，如国家代码、组织名等，这些信息将被包含在CSR中。(我们这边测试直接全部按回车键默认即可)</p><table><thead><tr><th>字段名称</th><th>描述</th><th>默认值/示例值</th><th>是否必填</th></tr></thead><tbody><tr><td>Country Name (2 letter code)</td><td>国家代码，两位字母代码。</td><td>AU</td><td>否</td></tr><tr><td>State or Province Name</td><td>州或省份的全名。</td><td></td><td>否</td></tr><tr><td>Locality Name (eg, city)</td><td>城市或地区名称。</td><td></td><td>否</td></tr><tr><td>Organization Name</td><td>组织名称，通常是公司或机构的名称。</td><td></td><td>否</td></tr><tr><td>Organizational Unit Name (eg, section)</td><td>组织单位名称，可以是部门或团队的名称。</td><td></td><td>否</td></tr><tr><td>Common Name (CN)</td><td>完全限定的域名（FQDN）或个人名称，用于标识证书持有者。</td><td></td><td>是</td></tr><tr><td>Email Address</td><td>与证书持有者关联的电子邮件地址。</td><td></td><td>否</td></tr><tr><td>Challenge Password</td><td>挑战密码，用于CSR的额外安全措施。</td><td></td><td>否</td></tr><tr><td>Optional Company Name</td><td>可选的公司名称字段。</td><td></td><td>否</td></tr></tbody></table><p><code>-config server_cert.conf</code>创建一个OpenSSL配置文件（如 <code>server_cert.conf</code>）并指定IP地址，具体的ip地址可以由ipconfig获取</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>[req]  </span></span>\n<span class="line"><span>distinguished_name = req_distinguished_name  </span></span>\n<span class="line"><span>req_extensions = v3_req  </span></span>\n<span class="line"><span>prompt = no  </span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>[req_distinguished_name]  </span></span>\n<span class="line"><span>CN = 192.168.199.108  </span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>[v3_req]  </span></span>\n<span class="line"><span>subjectAltName = @alt_names  </span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>[alt_names]  </span></span>\n<span class="line"><span>IP.1 = 192.168.199.108</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> x509</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -req</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server.csr</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CA</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ca.crt</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CAkey</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ca.key</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CAcreateserial</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server.crt</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -days</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 365</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -extfile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server_cert.conf</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -extensions</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v3_req</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> x509</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -req</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -days</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 365</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server.csr</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -signkey</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server.key</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server.cer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用CA证书签发服务器证书。<br> 生成cer证书供服务端验证。</p><p><strong>客户端证书：</strong></p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> genrsa</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client.key</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2048</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> req</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -new</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client.csr</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -key</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client.key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> x509</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -req</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client.csr</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CA</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ca.crt</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CAkey</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ca.key</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -CAcreateserial</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client.crt</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -days</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 500</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -sha256</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成客户端带密码的p12证书（这步很重要，双向认证的话，浏览器访问时候要导入该证书才行；可能某些Android系统版本请求的时候需要把它转成bks来请求双向认证）：</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openssl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pkcs12</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -export</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -out</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client.p12</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -inkey</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client.key</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client.crt</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -certfile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ca.crt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>到这一步的时候，设置密码和验证密码光标不会显示，直接输入即可<br><img src="'+D+'" alt="图片"></p><h4 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置"><span>环境配置</span></a></h4><p>PS:因为双向认证是本地搭建，所以需要完成几个前置条件:<br> 1.确保电脑和手机处于同一wifi连接下<br> 2.重打包替换生成的server.cer(路径在res/raw)，替换ssl_verify方法里的ip地址以及res/xml/network_config.xml的ip地址(通过ipconfig获取实际的ipv4地址)<br> 3.运行服务端代码，然后再请求看看是否能正常输出</p><p><strong>服务端代码：</strong></p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> flask </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Flask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> jsonify  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ssl  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">app </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Flask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">__name__</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># ssl 证书校验  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">route</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/ca</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ssl_verify</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">():</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> jsonify</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">message</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">HTTPS server with mutual SSL verification started.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 配置ssl上下文，关键函数  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> get_ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">():</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # CA根证书路径  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ca_crt_path </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">certs/ca.crt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 服务端证书和密钥路径  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    server_crt_path </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">certs/server.crt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    server_key_path </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">certs/server.key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 创建SSL上下文，使用TLS服务器模式  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ssl_context </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ssl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SSLContext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ssl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">PROTOCOL_TLS_SERVER</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 设置验证模式为需要客户端证书  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">verify_mode </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ssl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">CERT_REQUIRED</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 启用主机名检查（根据需要设置）  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">check_hostname </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> False</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 设置加密套件  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">set_ciphers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">HIGH:!SSLv3:!TLSv1:!aNULL:@STRENGTH</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 加载CA根证书，用于验证客户端证书  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">load_verify_locations</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">cafile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ca_crt_path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 加载服务端证书和私钥  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">load_cert_chain</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">certfile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">server_crt_path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> keyfile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">server_key_path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ssl_context  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __name__</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">__main__</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ssl_context </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> get_ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">host</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">192.168.124.21</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8088</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ssl_context</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端代码:</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kotlin" data-title="kotlin"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fun</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> ssl_verify</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 初始化一个用于信任管理的对象  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    var</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> trustManager: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">X509TrustManager</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">? </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 获取默认的信任管理工厂实例  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> trustManagerFactory </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TrustManagerFactory.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getInstance</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TrustManagerFactory.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getDefaultAlgorithm</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">())  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 初始化信任管理工厂，传入null表示使用系统默认的信任存储  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        trustManagerFactory.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> KeyStore?)  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 获取信任管理器列表  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> trustManagers </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> trustManagerFactory.trustManagers  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 检查信任管理器列表是否只有一个X509TrustManager类型的对象  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (trustManagers.size </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> trustManagers[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">] </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">is</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> X509TrustManager) {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 如果不符合预期，则抛出异常  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            throw</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> IllegalStateException</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;Unexpected default trust managers: </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">trustManagers.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">contentToString</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 赋值信任管理器  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        trustManager </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> trustManagers[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">] </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> X509TrustManager  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    } </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (e: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Exception</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 捕获异常并打印堆栈跟踪信息  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        e.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 创建 OkHttpClient 实例并配置SSL套接字工厂和主机名验证器  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> client </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> OkHttpClient.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Builder</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sslSocketFactory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 使用应用程序上下文获取自定义的SSL套接字工厂  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            ClientSSLSocketFactory.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSocketFactory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(applicationContext),  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 设置信任管理器，如果为null则抛出异常  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            trustManager ?: </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">throw</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> IllegalStateException</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;TrustManager is null&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        )  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\t\t.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hostnameVerifier</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> { hostname, session </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 构建请求  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> request </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Request.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Builder</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">url</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;https://192.168.124.21:8088/ca&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 设置请求的URL  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 发送HTTP请求并获取响应  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        val</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> response </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> client.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newCall</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(request).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">execute</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 打印响应的状态码，表明HTTPS双向认证成功  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">d</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TAG, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;双向检测通过:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">response.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">code</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    } </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (e: </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">IOException</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) {  </span></span>\n<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 如果请求失败，打印错误信息，并记录堆栈跟踪  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Log.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">d</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TAG, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;双向检测不通过&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        e.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dump内置证书:</code></p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> hook_KeyStore_load</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">perform</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ByteString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">com.android.okhttp.okio.ByteString</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> myArray</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1024</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> myArray</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            myArray</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0x0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">         }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">byte</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">myArray</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> StringClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.lang.String</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> KeyStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.security.KeyStore</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        KeyStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">load</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">overload</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.security.KeyStore$LoadStoreParameter</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">android.util.Log</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getStackTraceString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.lang.Throwable</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()));</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">KeyStore.load1:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">load</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        };</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        KeyStore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">load</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">overload</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.io.InputStream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[C</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">implementation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">android.util.Log</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getStackTraceString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.lang.Throwable</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()));</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">KeyStore.load2:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> StringClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">arg1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.io.File</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/data/user/0/com.zj.wuaipojie/files/client</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.p12</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">java.io.FileOutputStream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">read</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                    out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">buffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">证书保存成功!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">            this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">load</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">arg0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> arg1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        };</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    });</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、请作者喝咖啡" tabindex="-1"><a class="header-anchor" href="#四、请作者喝咖啡"><span>四、请作者喝咖啡</span></a></h1><p><img src="'+c+'" alt="图片"></p><h1 id="六、视频及课件地址" tabindex="-1"><a class="header-anchor" href="#六、视频及课件地址"><span>六、视频及课件地址</span></a></h1><p><a href="https://pan.baidu.com/s/1cFWTLn14jeWfpXxlx3syYw?pwd=nqu9" target="_blank" rel="noopener noreferrer">百度云</a><br><a href="https://www.aliyundrive.com/s/TJoKMK6du6x" target="_blank" rel="noopener noreferrer">阿里云</a><br><a href="https://www.bilibili.com/video/BV1wT411N7sV/?spm_id_from=333.788&amp;vd_source=6dde16dc6479f00694baaf73a2225452" target="_blank" rel="noopener noreferrer">哔哩哔哩</a><br><a href="https://github.com/ZJ595/AndroidReverse" target="_blank" rel="noopener noreferrer">教程开源地址</a><br> PS:解压密码都是52pj，阿里云由于不能分享压缩包，所以下载exe文件，双击自解压</p><h1 id="七、其他章节" tabindex="-1"><a class="header-anchor" href="#七、其他章节"><span>七、其他章节</span></a></h1><p><a href="https://www.52pojie.cn/thread-1695141-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》一、模拟器环境搭建</a><br><a href="https://www.52pojie.cn/thread-1695796-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》二、初识APK文件结构、双开、汉化、基础修改</a><br><a href="https://www.52pojie.cn/thread-1701353-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》三、初识smail，vip终结者</a><br><a href="https://www.52pojie.cn/thread-1706691-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》四、恭喜你获得广告&amp;弹窗静默卡</a><br><a href="https://www.52pojie.cn/thread-1714727-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》五、1000-7=？&amp;动态调试&amp;Log插桩</a><br><a href="https://www.52pojie.cn/thread-1731181-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》六、校验的N次方-签名校验对抗、PM代{过}{滤}理、IO重定向</a><br><a href="https://www.52pojie.cn/thread-1740944-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》七、Sorry，会Hook真的可以为所欲为-Xposed快速上手(上)模块编写,常用Api</a><br><a href="https://www.52pojie.cn/thread-1748081-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》八、Sorry，会Hook真的可以为所欲为-xposed快速上手(下)快速hook</a><br><a href="https://www.52pojie.cn/thread-1762225-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》九、密码学基础、算法自吐、非标准加密对抗</a><br><a href="https://www.52pojie.cn/thread-1787667-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十、不是我说，有了IDA还要什么女朋友？</a><br><a href="https://www.52pojie.cn/thread-1809646-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十二、大佬帮我分析一下</a><br><a href="https://www.52pojie.cn/thread-1814917-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》番外实战篇1-某电影视全家桶</a><br><a href="https://www.52pojie.cn/thread-1823118-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十三、是时候学习一下Frida一把梭了(上)</a><br><a href="https://www.52pojie.cn/thread-1838539-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十四、是时候学习一下Frida一把梭了(中)</a><br><a href="https://www.52pojie.cn/thread-1840174-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十五、是时候学习一下Frida一把梭了(下)</a><br><a href="https://www.52pojie.cn/thread-1859820-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十六、是时候学习一下Frida一把梭了(终)</a><br><a href="https://www.52pojie.cn/thread-1892127-1-1.html#/" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十七、你的RPCvs佬的RPC</a><br><a href="https://www.52pojie.cn/thread-1893708-1-1.html#/" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》番外实战篇2-【2024春节】解题领红包活动，启动!</a><br><a href="https://www.52pojie.cn/thread-1921073-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十八、表哥，你也不想你的Frida被检测吧!(上)</a><br><a href="https://www.52pojie.cn/thread-1938862-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》十九、表哥，你也不想你的Frida被检测吧!(下)</a><br><a href="https://www.52pojie.cn/thread-1945285-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》二十、抓包学得好，牢饭吃得饱(上)</a><br><a href="https://www.52pojie.cn/thread-1951619-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》番外实战篇3-拨云见日之浅谈Flutter逆向</a><br><a href="https://www.52pojie.cn/thread-1967845-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》第二十一课、抓包学得好，牢饭吃得饱(中)</a><br><a href="https://www.52pojie.cn/thread-1982444-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》第二十二课、抓包学得好，牢饭吃得饱(下)</a><br><a href="https://www.52pojie.cn/thread-1995107-1-1.html" target="_blank" rel="noopener noreferrer">《安卓逆向这档事》第二十三课、黑盒魔法之Unidbg </a></p><h1 id="八、参考文档" tabindex="-1"><a class="header-anchor" href="#八、参考文档"><span>八、参考文档</span></a></h1><p><a href="https://bbs.kanxue.com/thread-278142.htm" target="_blank" rel="noopener noreferrer">炒冷饭汇总抓包姿势-上</a><br><a href="https://bbs.kanxue.com/thread-267940.htm" target="_blank" rel="noopener noreferrer">[原创]android抓包学习的整理和归纳</a><br><a href="https://xz.aliyun.com/t/11398?time__1311=Cq0xR7D%3DiQDQitD%2F82c0DIgjbDkzN7Ka4D" target="_blank" rel="noopener noreferrer">浅析APP代理检测对抗</a><br><a href="https://bbs.kanxue.com/thread-270634.htm" target="_blank" rel="noopener noreferrer">[原创]Android APP漏洞之战（6）——HTTP/HTTPs通信漏洞详解</a><br><a href="https://curz0n.github.io/2020/08/15/android-ssl-and-intercept/#6-%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener noreferrer">Android HTTPS防抓包策略与对抗方法总结</a><br><a href="https://github.com/WooyunDota/DroidDrops/blob/master/2018/Frida.Android.Practice.md#fridaandroidpractice-ssl-unpinning" target="_blank" rel="noopener noreferrer">Frida.Android.Practice (ssl unpinning)</a><br><a href="https://ch3nye.top/Android-HTTPS%E8%AE%A4%E8%AF%81%E7%9A%84N%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E5%AF%B9%E6%8A%97%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/#android-https%E8%AE%A4%E8%AF%81%E7%9A%84n%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E5%AF%B9%E6%8A%97%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93" target="_blank" rel="noopener noreferrer">Android HTTPS认证的N种方式和对抗方法总结</a></p>',83)]))}]]),o=JSON.parse('{"path":"/article/lokrgpvi/","title":"【Android逆向-正己】第二十一课：抓包学得好，牢饭吃得饱(中)","lang":"zh-CN","frontmatter":{"title":"【Android逆向-正己】第二十一课：抓包学得好，牢饭吃得饱(中)","createTime":"2025/01/03 00:51:50","permalink":"/article/lokrgpvi/","tags":["Android","逆向","Android逆向"],"description":"|600 一、课程目标 1.了解代理以及VPN检测与对抗 2.了解SSL Pinning 3.了解双向认证 二、工具 1.教程Demo(更新) 2.Charles 3.Reqable 三、课程内容 1.代理检测 定义 代理检测是用于检测设备是否设置了网络代理。这种检测的目的是识别出设备是否尝试通过代理服务器（如抓包工具）来转发网络流量，从而可能截获和分...","head":[["meta",{"property":"og:url","content":"https://blog.529464.xyz/article/lokrgpvi/"}],["meta",{"property":"og:site_name","content":"only9464"}],["meta",{"property":"og:title","content":"【Android逆向-正己】第二十一课：抓包学得好，牢饭吃得饱(中)"}],["meta",{"property":"og:description","content":"|600 一、课程目标 1.了解代理以及VPN检测与对抗 2.了解SSL Pinning 3.了解双向认证 二、工具 1.教程Demo(更新) 2.Charles 3.Reqable 三、课程内容 1.代理检测 定义 代理检测是用于检测设备是否设置了网络代理。这种检测的目的是识别出设备是否尝试通过代理服务器（如抓包工具）来转发网络流量，从而可能截获和分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-03T08:30:10.000Z"}],["meta",{"property":"article:tag","content":"Android"}],["meta",{"property":"article:tag","content":"逆向"}],["meta",{"property":"article:tag","content":"Android逆向"}],["meta",{"property":"article:modified_time","content":"2025-01-03T08:30:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【Android逆向-正己】第二十一课：抓包学得好，牢饭吃得饱(中)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-03T08:30:10.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":22.79,"words":6838},"git":{"updatedTime":1735893010000,"contributors":[{"name":"only9464","email":"sky9464@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/only9464?v=4","url":"https://github.com/only9464"}],"changelog":[{"hash":"c2297fcee496a29a39e5cd2db503b35d907c4f8e","date":1735893010000,"email":"sky9464@qq.com","author":"only9464","message":"Add Android逆向-正己 系列教程","commitUrl":"https://github.com/for9464/for9464.github.io/commit/c2297fcee496a29a39e5cd2db503b35d907c4f8e"}]},"autoDesc":true,"filePathRelative":"AndroidReserve/23第二十一课、抓包学得好，牢饭吃得饱(中).md","categoryList":[{"id":"d98243","sort":10002,"name":"AndroidReserve"}],"bulletin":false}')}}]);